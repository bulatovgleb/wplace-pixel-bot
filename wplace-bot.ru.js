// wplace-bot.ru.js
// ===============================================
// WPlace –ë–æ—Ç (–ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π, —Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π)
// –ê–≤—Ç–æ—Ä: –≤—ã–ª–æ–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ GitHub
// –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∏–∫—Å–µ–ª–µ–π –Ω–∞ wplace.live
// ===============================================

(function () {
  'use strict';

  class WPlaceBot {
    constructor() {
      this.isRunning = false;
      this.delay = 1000; // –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–ª–∏–∫–∞–º–∏ (–º—Å)
      this.currentPixel = 0;
      this.pixels = [];
      this.startX = 0;
      this.startY = 0;
      this.canvas = null;
      this.colorPalette = [];
      this.selectedColor = '#000000';
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init() {
      console.log('üé® WPlace –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
      this.findCanvas();
      this.findColorPalette();
      this.createControlPanel();
      console.log('‚úÖ WPlace –ë–æ—Ç –ó–∞–≥—Ä—É–∂–µ–Ω!');
      console.log(`
–ö–æ–º–∞–Ω–¥—ã:
- wplaceBot.setStartPosition(x, y)  ‚Äî –∑–∞–¥–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
- wplaceBot.setDelay(ms)            ‚Äî –∑–∞–¥–∞—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É (–º—Å)
- wplaceBot.loadHeartImage()        ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–¥–µ—á–∫–æ 7√ó7
- wplaceBot.loadSmileyImage()       ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–º–∞–π–ª–∏–∫ 7√ó7
- wplaceBot.loadImageFromData(arr)  ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Å—Å–∏–≤ –ø–∏–∫—Å–µ–ª–µ–π
- wplaceBot.loadImageFromUrl(url, maxW, maxH) ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–∑ URL/data URL
- wplaceBot.start()                 ‚Äî —Å—Ç–∞—Ä—Ç —Ä–∏—Å–æ–≤–∞–Ω–∏—è
- wplaceBot.stop()                  ‚Äî —Å—Ç–æ–ø
      `);
    }

    // –ü–æ–∏—Å–∫ canvas
    findCanvas() {
      const possibleSelectors = [
        'canvas',
        '#canvas',
        '.canvas',
        '[data-testid="canvas"]',
        'canvas[width]',
        'canvas[height]'
      ];

      for (const selector of possibleSelectors) {
        const element = document.querySelector(selector);
        if (element) {
          this.canvas = element;
          console.log('‚úÖ Canvas –Ω–∞–π–¥–µ–Ω:', selector);
          return;
        }
      }
      console.error('‚ùå Canvas –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ wplace.live');
    }

    // –ü–æ–∏—Å–∫ –ø–∞–ª–∏—Ç—Ä—ã —Ü–≤–µ—Ç–æ–≤ (–∏–∑ DOM)
    findColorPalette() {
      const colorElements = document.querySelectorAll(
        '[style*="background-color"], .color, [data-color], .palette-color'
      );

      this.colorPalette = [];
      colorElements.forEach(element => {
        const bgColor = window.getComputedStyle(element).backgroundColor;
        if (bgColor && bgColor !== 'rgba(0, 0, 0, 0)') {
          this.colorPalette.push({ element, color: bgColor });
        }
      });

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ü–≤–µ—Ç–æ–≤ –≤ –ø–∞–ª–∏—Ç—Ä–µ: ${this.colorPalette.length}`);
    }

    // HEX -> RGB –æ–±—ä–µ–∫—Ç
    hexToRgb(hex) {
      const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
      return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
      } : null;
    }

    // "rgb(‚Ä¶)" -> –æ–±—ä–µ–∫—Ç
    rgbStringToObject(rgb) {
      const result = rgb.match(/\d+/g);
      if (!result || result.length < 3) return null;
      return {
        r: parseInt(result[0]),
        g: parseInt(result[1]),
        b: parseInt(result[2])
      };
    }

    // –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ü–≤–µ—Ç–∞ –≤ –ø–∞–ª–∏—Ç—Ä–µ
    findClosestColor(targetColor) {
      if (this.colorPalette.length === 0) return null;

      let closestColor = this.colorPalette[0];
      let minDistance = Infinity;

      const target = this.hexToRgb(targetColor);
      if (!target) return closestColor;

      this.colorPalette.forEach(paletteColor => {
        const rgb = this.rgbStringToObject(paletteColor.color);
        if (rgb) {
          const distance = Math.sqrt(
            Math.pow(target.r - rgb.r, 2) +
            Math.pow(target.g - rgb.g, 2) +
            Math.pow(target.b - rgb.b, 2)
          );
          if (distance < minDistance) {
            minDistance = distance;
            closestColor = paletteColor;
          }
        }
      });

      return closestColor;
    }

    // –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ (–∫–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É –ø–∞–ª–∏—Ç—Ä—ã)
    selectColor(color) {
      const closestColor = this.findClosestColor(color);
      if (closestColor && closestColor.element) {
        closestColor.element.click();
        this.selectedColor = color;
        console.log(`üé® –í—ã–±—Ä–∞–Ω —Ü–≤–µ—Ç: ${color}`);
        return true;
      }
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç', color, '(–ø–∞–ª–∏—Ç—Ä–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞).');
      return false;
    }

    // –ö–ª–∏–∫ –ø–æ canvas –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–≤ –ø–∏–∫—Å–µ–ª—è—Ö –æ–∫–Ω–∞)
    clickCanvas(x, y) {
      if (!this.canvas) return false;

      const rect = this.canvas.getBoundingClientRect();
      const canvasX = x + rect.left;
      const canvasY = y + rect.top;

      ['mousedown', 'mouseup', 'click', 'pointerdown', 'pointerup'].forEach(type => {
        const ev = new MouseEvent(type, {
          bubbles: true,
          cancelable: true,
          clientX: canvasX,
          clientY: canvasY,
          button: 0
        });
        this.canvas.dispatchEvent(ev);
      });

      console.log(`üñ±Ô∏è –ö–ª–∏–∫ –ø–æ canvas: (${x}, ${y})`);
      return true;
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–º–∞—Ç—Ä–∏—Ü–∞ —Ü–≤–µ—Ç–æ–≤)
    loadSimpleImage(imageData, width, height) {
      this.pixels = [];
      for (let y = 0; y < height; y++) {
        for (let x = 0; x < width; x++) {
          const index = y * width + x;
          if (index < imageData.length) {
            this.pixels.push({ x, y, color: imageData[index] });
          }
        }
      }
      console.log(`üì∑ –ö–∞—Ä—Ç–∏–Ω–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${width}√ó${height} (${this.pixels.length} –ø–∏–∫—Å–µ–ª–µ–π)`);
    }

    // –ü—Ä–µ—Å–µ—Ç: —Å–µ—Ä–¥–µ—á–∫–æ 7√ó7
    loadHeartImage() {
      const heart = [
        '‚¨ú','üü•','üü•','‚¨ú','üü•','üü•','‚¨ú',
        'üü•','üü•','üü•','üü•','üü•','üü•','üü•',
        'üü•','üü•','üü•','üü•','üü•','üü•','üü•',
        'üü•','üü•','üü•','üü•','üü•','üü•','üü•',
        '‚¨ú','üü•','üü•','üü•','üü•','üü•','‚¨ú',
        '‚¨ú','‚¨ú','üü•','üü•','üü•','‚¨ú','‚¨ú',
        '‚¨ú','‚¨ú','‚¨ú','üü•','‚¨ú','‚¨ú','‚¨ú'
      ];
      const colorMap = { 'üü•':'#FF0000', '‚¨ú':'#FFFFFF' };
      const imageData = heart.map(e => colorMap[e] || '#FFFFFF');
      this.loadSimpleImage(imageData, 7, 7);
    }

    // –ü—Ä–µ—Å–µ—Ç: —Å–º–∞–π–ª 7√ó7
    loadSmileyImage() {
      const smiley = [
        '‚¨ú','‚¨ú','üü®','üü®','üü®','‚¨ú','‚¨ú',
        '‚¨ú','üü®','üü®','üü®','üü®','üü®','‚¨ú',
        'üü®','üü®','‚¨õ','üü®','‚¨õ','üü®','üü®',
        'üü®','üü®','üü®','üü®','üü®','üü®','üü®',
        'üü®','‚¨õ','üü®','üü®','üü®','‚¨õ','üü®',
        '‚¨ú','üü®','‚¨õ','‚¨õ','‚¨õ','üü®','‚¨ú',
        '‚¨ú','‚¨ú','üü®','üü®','üü®','‚¨ú','‚¨ú'
      ];
      const colorMap = { 'üü®':'#FFFF00', '‚¨õ':'#000000', '‚¨ú':'#FFFFFF' };
      const imageData = smiley.map(e => colorMap[e] || '#FFFFFF');
      this.loadSimpleImage(imageData, 7, 7);
    }

    // –°—Ç–∞—Ä—Ç
    async start() {
      if (this.isRunning) { console.log('‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω.'); return; }
      if (this.pixels.length === 0) { console.log('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É.'); return; }

      this.isRunning = true;
      this.currentPixel = 0;
      console.log('üöÄ –°—Ç–∞—Ä—Ç —Ä–∏—Å–æ–≤–∞–Ω–∏—è‚Ä¶');

      while (this.isRunning && this.currentPixel < this.pixels.length) {
        const pixel = this.pixels[this.currentPixel];
        const x = this.startX + pixel.x;
        const y = this.startY + pixel.y;

        if (this.selectColor(pixel.color)) {
          await this.sleep(200);
          this.clickCanvas(x, y);
          console.log(`‚úÖ –ü–∏–∫—Å–µ–ª—å ${this.currentPixel + 1}/${this.pixels.length} ‚Üí (${x}, ${y})`);
        }

        this.currentPixel++;
        await this.sleep(this.delay);
      }

      this.isRunning = false;
      console.log('‚úÖ –†–∏—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.');
    }

    // –°—Ç–æ–ø
    stop() {
      this.isRunning = false;
      console.log('‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
    }

    // –ü–∞—É–∑–∞
    sleep(ms) {
      return new Promise(res => setTimeout(res, ms));
    }

    // –ü–æ–∑–∏—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞
    setStartPosition(x, y) {
      this.startX = x|0;
      this.startY = y|0;
      console.log(`üìç –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: (${this.startX}, ${this.startY})`);
    }

    // –ó–∞–¥–µ—Ä–∂–∫–∞
    setDelay(ms) {
      this.delay = Math.max(0, ms|0);
      console.log(`‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞: ${this.delay} –º—Å`);
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Å—Å–∏–≤–∞ –ø–∏–∫—Å–µ–ª–µ–π
    loadImageFromData(pixelData, name = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞') {
      if (!Array.isArray(pixelData)) {
        console.error('‚ùå –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º –æ–±—ä–µ–∫—Ç–æ–≤ {x, y, color}');
        return false;
      }
      const isValid = pixelData.every(p =>
        p && typeof p.x === 'number' && typeof p.y === 'number' && typeof p.color === 'string'
      );
      if (!isValid) {
        console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ö–∞–∂–¥—ã–π –ø–∏–∫—Å–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å {x, y, color}');
        return false;
      }

      this.pixels = pixelData.slice();
      console.log(`‚úÖ ${name} –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${pixelData.length} –ø–∏–∫—Å–µ–ª–µ–π`);

      const maxX = Math.max(...pixelData.map(p => p.x), 0);
      const maxY = Math.max(...pixelData.map(p => p.y), 0);
      console.log(`üìê –†–∞–∑–º–µ—Ä: ${maxX + 1}√ó${maxY + 1}`);

      const uniqueColors = [...new Set(pixelData.map(p => p.color))];
      console.log(`üé® –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤: ${uniqueColors.length}`);
      return true;
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ URL/dataURL
    async loadImageFromUrl(imageUrl, maxWidth = 50, maxHeight = 50) {
      try {
        console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ URL‚Ä¶');
        const img = new Image();
        img.crossOrigin = 'anonymous';

        return new Promise((resolve, reject) => {
          img.onload = () => {
            try {
              const pixelData = this.processImageToPixels(img, maxWidth, maxHeight);
              this.loadImageFromData(pixelData, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ URL');
              resolve(true);
            } catch (e) { reject(e); }
          };
          img.onerror = () => reject(new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL'));
          img.src = imageUrl;
        });
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', err);
        return false;
      }
    }

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∏–∫—Å–µ–ª–µ–π –∏–∑ HTMLImageElement
    processImageToPixels(img, maxWidth, maxHeight) {
      const scale = Math.min(maxWidth / img.width, maxHeight / img.height);
      const width = Math.max(1, Math.floor(img.width * scale));
      const height = Math.max(1, Math.floor(img.height * scale));

      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      canvas.width = width;
      canvas.height = height;

      ctx.imageSmoothingEnabled = false;
      ctx.drawImage(img, 0, 0, width, height);

      const imageData = ctx.getImageData(0, 0, width, height);
      const data = imageData.data;

      const pixels = [];
      for (let y = 0; y < height; y++) {
        for (let x = 0; x < width; x++) {
          const idx = (y * width + x) * 4;
          const r = data[idx];
          const g = data[idx + 1];
          const b = data[idx + 2];
          const a = data[idx + 3];

          if (a < 128) continue; // –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

          const color = '#' + [r, g, b].map(v => {
            const h = v.toString(16);
            return h.length === 1 ? '0' + h : h;
          }).join('');

          pixels.push({ x, y, color });
        }
      }
      return pixels;
    }

    // –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–Ω–∞ —Ä—É—Å—Å–∫–æ–º)
    createControlPanel() {
      const existing = document.getElementById('wplace-bot-panel');
      if (existing) existing.remove();

      const panel = document.createElement('div');
      panel.id = 'wplace-bot-panel';
      panel.style.cssText = `
        position: fixed;
        top: 10px;
        right: 10px;
        background: #2c2c2c;
        color: #fff;
        padding: 15px;
        border-radius: 10px;
        font-family: Arial, sans-serif;
        font-size: 12px;
        z-index: 10000;
        width: 250px;
        box-shadow: 0 4px 8px rgba(0,0,0,.3);
      `;

      panel.innerHTML = `
        <h3 style="margin:0 0 10px 0; color:#4CAF50;">üé® WPlace –ë–æ—Ç</h3>

        <div style="margin-bottom:10px; display:flex; justify-content:space-between;">
          <label>–ü–æ–∑–∏—Ü–∏—è X: <input type="number" id="startX" value="100" style="width:66px;"></label>
          <label>–ü–æ–∑–∏—Ü–∏—è Y: <input type="number" id="startY" value="100" style="width:66px;"></label>
        </div>

        <div style="margin-bottom:10px;">
          <label>–ó–∞–¥–µ—Ä–∂–∫–∞ (–º—Å): <input type="number" id="delay" value="1000" style="width:90px;"></label>
        </div>

        <div style="margin-bottom:10px;">
          <button id="loadHeart" style="margin-right:5px; margin-bottom:5px;">‚ù§Ô∏è –°–µ—Ä–¥—Ü–µ</button>
          <button id="loadSmiley" style="margin-bottom:5px;">üòä –°–º–∞–π–ª–∏–∫</button>
        </div>

        <div style="margin-bottom:10px;">
          <input type="file" id="imageInput" accept="image/*" style="display:none;">
          <button id="loadCustom" style="background:#FF9800;color:#fff;border:none;padding:6px 10px;border-radius:4px;margin-right:5px;margin-bottom:5px;font-size:11px;">üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å</button>
          <button id="openConverter" style="background:#9C27B0;color:#fff;border:none;padding:6px 10px;border-radius:4px;margin-right:5px;margin-bottom:5px;font-size:11px;">üîß –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä</button>
          <button id="openEditor" style="background:#E91E63;color:#fff;border:none;padding:6px 10px;border-radius:4px;margin-bottom:5px;font-size:11px;">üé® –†–µ–¥–∞–∫—Ç–æ—Ä</button>
        </div>

        <div style="margin-bottom:10px;">
          <button id="startBot" style="background:#4CAF50;color:#fff;border:none;padding:8px 12px;border-radius:4px;margin-right:5px;">‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫</button>
          <button id="stopBot" style="background:#f44336;color:#fff;border:none;padding:8px 12px;border-radius:4px;">‚èπÔ∏è –°—Ç–æ–ø</button>
        </div>

        <div id="status" style="font-size:11px;color:#ccc;">–°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤</div>
      `;

      document.body.appendChild(panel);

      // –°–ª—É—à–∞—Ç–µ–ª–∏
      panel.querySelector('#startX').addEventListener('input', e => {
        this.setStartPosition(parseInt(e.target.value) || 0, this.startY);
      });
      panel.querySelector('#startY').addEventListener('input', e => {
        this.setStartPosition(this.startX, parseInt(e.target.value) || 0);
      });
      panel.querySelector('#delay').addEventListener('input', e => {
        this.setDelay(parseInt(e.target.value) || 1000);
      });

      panel.querySelector('#loadHeart').addEventListener('click', () => {
        this.loadHeartImage();
        panel.querySelector('#status').textContent = '–°—Ç–∞—Ç—É—Å: –°–µ—Ä–¥—Ü–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ';
      });
      panel.querySelector('#loadSmiley').addEventListener('click', () => {
        this.loadSmileyImage();
        panel.querySelector('#status').textContent = '–°—Ç–∞—Ç—É—Å: –°–º–∞–π–ª–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω';
      });

      panel.querySelector('#startBot').addEventListener('click', () => {
        this.start();
        panel.querySelector('#status').textContent = '–°—Ç–∞—Ç—É—Å: –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è‚Ä¶';
      });
      panel.querySelector('#stopBot').addEventListener('click', () => {
        this.stop();
        panel.querySelector('#status').textContent = '–°—Ç–∞—Ç—É—Å: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
      });

      panel.querySelector('#loadCustom').addEventListener('click', () => {
        panel.querySelector('#imageInput').click();
      });

      panel.querySelector('#imageInput').addEventListener('change', async (e) => {
        if (e.target.files.length > 0) {
          const file = e.target.files[0];
          try {
            panel.querySelector('#status').textContent = '–°—Ç–∞—Ç—É—Å: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è‚Ä¶';
            const reader = new FileReader();
            reader.onload = async (ev) => {
              try {
                await this.loadImageFromUrl(ev.target.result, 50, 50);
                panel.querySelector('#status').textContent = '–°—Ç–∞—Ç—É—Å: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!';
              } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
                panel.querySelector('#status').textContent = '–°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ';
              }
            };
            reader.readAsDataURL(file);
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
            panel.querySelector('#status').textContent = '–°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞';
          }
        }
      });

      panel.querySelector('#openConverter').addEventListener('click', () => {
        const path = window.location.origin + window.location.pathname.replace(/[^/]*$/, '') + 'image-converter.html';
        window.open(path, '_blank');
      });

      panel.querySelector('#openEditor').addEventListener('click', () => {
        const path = window.location.origin + window.location.pathname.replace(/[^/]*$/, '') + 'pixel-editor.html';
        window.open(path, '_blank');
      });
    }
  }

  // === –≠–∫—Å–ø–æ—Ä—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ ===
  // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å/–Ω–∞–π—Ç–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä –≤ —Ç–µ–∫—É—â–µ–º –æ–∫–Ω–µ
  const g = window || globalThis;
  if (typeof g.wplaceBot === 'undefined') {
    g.wplaceBot = new WPlaceBot();
    g.wplaceBot.init();
  }

  // –ï—Å–ª–∏ –±–æ—Ç –≤–¥—Ä—É–≥ –∂–∏–≤–µ—Ç –≤–æ —Ñ—Ä–µ–π–º–µ ‚Äî –Ω–∞–π–¥—ë–º –∏ ¬´–≤—ã—Ç—è–Ω–µ–º¬ª –Ω–∞—Ä—É–∂—É
  (function exportFromFrames() {
    try {
      if (g.wplaceBot) return; // —É–∂–µ –µ—Å—Ç—å
      let found = null;
      (function scan(win) {
        try {
          if (win.wplaceBot) { found = win.wplaceBot; return; }
          if (win.WPlaceBot) {
            win.wplaceBot = new win.WPlaceBot();
            win.wplaceBot.init();
            found = win.wplaceBot; return;
          }
          for (let i = 0; i < win.frames.length; i++) {
            scan(win.frames[i]);
            if (found) return;
          }
        } catch (_) {}
      })(g);
      if (found) {
        g.wplaceBot = found;
        console.log('üîó –≠–∫–∑–µ–º–ø–ª—è—Ä wplaceBot –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–µ—Ä—Ö–Ω–µ–º –æ–∫–Ω–µ.');
      }
    } catch (_) {}
  })();

})();
